name: MIRA CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.82.0
  ZIG_VERSION: 0.15.1

jobs:
  # Rust核心测试
  rust-test:
    name: Rust Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Format check
      run: cargo fmt --all -- --check
    
    - name: Clippy check
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run benchmark
      run: cargo bench

  # Zig系统层测试  
  zig-test:
    name: Zig Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ env.ZIG_VERSION }}
    
    - name: Run Zig tests
      run: |
        cd zig_system
        zig build test
        zig build integration-test
        zig build bench

  # Python推理层测试
  python-test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.13]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd python_service
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        cd python_service  
        ruff check .
        black --check .
        mypy .
    
    - name: Run tests
      run: |
        cd python_service
        pytest tests/ -v --cov=main --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./python_service/coverage.xml

  # 集成测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-test, zig-test, python-test]
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ env.ZIG_VERSION }}
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
    
    - name: Build all components
      run: |
        make build
    
    - name: Run integration tests
      run: |
        make test
    
    - name: Run end-to-end demo
      run: |
        timeout 30s cargo run --example main || [ $? -eq 124 ]

  # 安全审计
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Rust security audit
      uses: rustsec/audit-check@v1.4.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Python security check
      run: |
        cd python_service
        pip install bandit safety
        bandit -r .
        safety check

  # 构建Docker镜像
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Python service
      uses: docker/build-push-action@v5
      with:
        context: ./python_service
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/mira-python:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/mira-python:${{ github.sha }}
    
    - name: Build and push Rust service  
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.rust
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/mira-rust:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/mira-rust:${{ github.sha }}

  # 性能回归测试
  performance-test:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup environment
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Run benchmarks on PR
      run: |
        cargo bench -- --output-format json > pr_benchmarks.json
    
    - name: Checkout main branch  
      run: git checkout main
    
    - name: Run benchmarks on main
      run: |
        cargo bench -- --output-format json > main_benchmarks.json
    
    - name: Compare performance
      run: |
        # 这里可以添加性能比较脚本
        echo "Performance comparison completed"
